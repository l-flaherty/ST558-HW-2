[
  {
    "objectID": "Programming In Base R.html",
    "href": "Programming In Base R.html",
    "title": "Programming In Base R",
    "section": "",
    "text": "We are given some data on patients who undergo a treatment. Their blood pressure pre and post-treatment is recorded below.\n\npre_bp=c(130, 128, 116, 124, 133,\n         134, 118, 126, 114, 127, \n         141, 138, 128, 140, 137, \n         131, 120, 128, 139, 135) \npost_bp=c(114, 98, 113, 99, 107, \n          116, 113, 111, 119, 117, \n          101, 119, 130, 122, 106, \n          106, 124, 102, 117, 113)\n\nWe are then asked to give names to the observations, which can easily be done with the paste0 function.\n\nnames(pre_bp)=paste0(\"Subject_\", 1:length(pre_bp))\nnames(post_bp)=paste0(\"Subject_\", 1:length(post_bp))\n\nOnce we’ve named our observations, we then calculate the average difference in blood pressure for each observation after going through treatment. To practice filtering the vector of observations, we return all those subjects whose blood-pressure decreased, and then return the average difference in blood pressure after treatment just for those observations who experienced a decrease in blood pressure.\n\ndiff_bp=post_bp-pre_bp                 #create new vector#\nmean(diff_bp)                          #-17#\n\n[1] -17\n\nwhich(diff_bp&lt;0)                       #specific circumstances#\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n         1          2          3          4          5          6          7 \n Subject_8 Subject_10 Subject_11 Subject_12 Subject_14 Subject_15 Subject_16 \n         8         10         11         12         14         15         16 \nSubject_18 Subject_19 Subject_20 \n        18         19         20 \n\nmean(diff_bp[which(diff_bp&lt;0)])        #-20.64706#\n\n[1] -20.64706"
  },
  {
    "objectID": "Programming In Base R.html#part-1-basic-vector-practice",
    "href": "Programming In Base R.html#part-1-basic-vector-practice",
    "title": "Programming In Base R",
    "section": "",
    "text": "We are given some data on patients who undergo a treatment. Their blood pressure pre and post-treatment is recorded below.\n\npre_bp=c(130, 128, 116, 124, 133,\n         134, 118, 126, 114, 127, \n         141, 138, 128, 140, 137, \n         131, 120, 128, 139, 135) \npost_bp=c(114, 98, 113, 99, 107, \n          116, 113, 111, 119, 117, \n          101, 119, 130, 122, 106, \n          106, 124, 102, 117, 113)\n\nWe are then asked to give names to the observations, which can easily be done with the paste0 function.\n\nnames(pre_bp)=paste0(\"Subject_\", 1:length(pre_bp))\nnames(post_bp)=paste0(\"Subject_\", 1:length(post_bp))\n\nOnce we’ve named our observations, we then calculate the average difference in blood pressure for each observation after going through treatment. To practice filtering the vector of observations, we return all those subjects whose blood-pressure decreased, and then return the average difference in blood pressure after treatment just for those observations who experienced a decrease in blood pressure.\n\ndiff_bp=post_bp-pre_bp                 #create new vector#\nmean(diff_bp)                          #-17#\n\n[1] -17\n\nwhich(diff_bp&lt;0)                       #specific circumstances#\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n         1          2          3          4          5          6          7 \n Subject_8 Subject_10 Subject_11 Subject_12 Subject_14 Subject_15 Subject_16 \n         8         10         11         12         14         15         16 \nSubject_18 Subject_19 Subject_20 \n        18         19         20 \n\nmean(diff_bp[which(diff_bp&lt;0)])        #-20.64706#\n\n[1] -20.64706"
  },
  {
    "objectID": "Programming In Base R.html#part-2-basic-data-frame-practice",
    "href": "Programming In Base R.html#part-2-basic-data-frame-practice",
    "title": "Programming In Base R",
    "section": "Part 2: Basic Data Frame Practice",
    "text": "Part 2: Basic Data Frame Practice\nNow we want to put our vectors together in a dataframe which we will call treatment. Note that we can title a new column from within the data.frame function, which we do here with the patient vector.\n\ntreatment=data.frame(                          \n  patient=names(pre_bp),\n  pre_bp, \n  post_bp,\n  diff_bp,\n  row.names=NULL)                    #don't show the name of the observations#\n\nLike Part 1, we are interested in those subjects who experienced a decrease in blood pressure. We can filter the dataframe in the same sort of way we filtered the vector, except now we make sure to specify the columns we want to return too (instead of [] with the vector, we use [,] with the dataframe).\n\ntreatment[which(treatment$diff_bp&lt;0),]      #return all columns#\n\n      patient pre_bp post_bp diff_bp\n1   Subject_1    130     114     -16\n2   Subject_2    128      98     -30\n3   Subject_3    116     113      -3\n4   Subject_4    124      99     -25\n5   Subject_5    133     107     -26\n6   Subject_6    134     116     -18\n7   Subject_7    118     113      -5\n8   Subject_8    126     111     -15\n10 Subject_10    127     117     -10\n11 Subject_11    141     101     -40\n12 Subject_12    138     119     -19\n14 Subject_14    140     122     -18\n15 Subject_15    137     106     -31\n16 Subject_16    131     106     -25\n18 Subject_18    128     102     -26\n19 Subject_19    139     117     -22\n20 Subject_20    135     113     -22\n\n\nNew vectors can be named and added to our dataframe directly ($ is not just for referencing of an existing vector, but also specifying a new one). Here we create a column of Boolean data and add it to our treatment dataframe (we could also use cbind or data.frame again if we wanted).\n\ntreatment$low_bp=ifelse(treatment$post_bp&lt;120, TRUE, FALSE)\n\nAs a matter of preference, we can show the entirety of this new dataframe in a different format with knitr.\n\nknitr::kable(treatment)                     \n\n\n\n\npatient\npre_bp\npost_bp\ndiff_bp\nlow_bp\n\n\n\n\nSubject_1\n130\n114\n-16\nTRUE\n\n\nSubject_2\n128\n98\n-30\nTRUE\n\n\nSubject_3\n116\n113\n-3\nTRUE\n\n\nSubject_4\n124\n99\n-25\nTRUE\n\n\nSubject_5\n133\n107\n-26\nTRUE\n\n\nSubject_6\n134\n116\n-18\nTRUE\n\n\nSubject_7\n118\n113\n-5\nTRUE\n\n\nSubject_8\n126\n111\n-15\nTRUE\n\n\nSubject_9\n114\n119\n5\nTRUE\n\n\nSubject_10\n127\n117\n-10\nTRUE\n\n\nSubject_11\n141\n101\n-40\nTRUE\n\n\nSubject_12\n138\n119\n-19\nTRUE\n\n\nSubject_13\n128\n130\n2\nFALSE\n\n\nSubject_14\n140\n122\n-18\nFALSE\n\n\nSubject_15\n137\n106\n-31\nTRUE\n\n\nSubject_16\n131\n106\n-25\nTRUE\n\n\nSubject_17\n120\n124\n4\nFALSE\n\n\nSubject_18\n128\n102\n-26\nTRUE\n\n\nSubject_19\n139\n117\n-22\nTRUE\n\n\nSubject_20\n135\n113\n-22\nTRUE"
  },
  {
    "objectID": "Programming In Base R.html#part-3-list-practice",
    "href": "Programming In Base R.html#part-3-list-practice",
    "title": "Programming In Base R",
    "section": "Part 3: List Practice",
    "text": "Part 3: List Practice\nNow that we’ve explored vectors and dataframes, we move on to lists. To do so, we put together some new data on a population that didn’t undergo a treatment but instead took a placebo. To make our lives easier in the long-run, and since we will henceforth access the data only through lists or dataframes, we have no reservations about using the same names for the vectors as we did in Part 1.\n\npre_bp=c(138, 135, 147, 117, 152,                   #overwriting previous vector#\n         134, 114, 121, 131, 130)\npost_bp=c(105, 136, 123, 130, 134,                  #overwriting previous vector#\n          143, 135, 139, 120, 124)\n\nWe now create the same type of dataframe as we had in Part 2, this time calling it placebo. Since we’ve already shown the step-by-step way to do so, we can just do it in one go here.\n\nplacebo=data.frame(                                     \n  patient=paste0(\"Placebo_Subject_\", 1:length(pre_bp)),\n  pre_bp,\n  post_bp,\n  diff_bp=post_bp-pre_bp,                              \n  low_bp=ifelse(post_bp&lt;120, TRUE, FALSE),\n  row.names=NULL)    \n\nNow we place both the treatment and placebo dataframes together in a list. So that we can reference the names of the dataframes from the list in the future, we name the inputs to the list within the list function.\n\nmylist=list(treatment=treatment, placebo=placebo)\n\nTo practice accessing elements in a list, we show a few different methods. Note that [i] returns the \\(i^{\\text{th}}\\) element in the list as a list, while [[[i]] returns the \\(i^{\\text{th}}\\) element in the list as its own class (vectors are returned as vectors, dataframes as dataframes, etc.). Further note that we elect not to show the return of these calls, since they would just clutter our document. To do so, we preface the code chunk in Quarto with {r, output=FALSE} instead of {r}.\n\nmylist[1]                                         #returns a list#\nmylist[[1]]                                       #returns a dataframe#\nmylist[[\"treatment\"]]                             #other way to access df in list#\nmylist$treatment                                  #other way to access df in list#\nmylist[[-2]]                                      #other way to access df in list#\n\nIf we want to access specific parts of the dataframe, we can use an additional instance of [].\n\nmylist[[\"placebo\"]][\"pre_bp\"]                     #specific part of df from list#\n\n   pre_bp\n1     138\n2     135\n3     147\n4     117\n5     152\n6     134\n7     114\n8     121\n9     131\n10    130\n\n\nNote that we can chain together [[]] to get more and more specific information of our list. For example, if we have a list of lists and want to access not just the column (like the above snippet), but a specific element in the column, we could do something like the below.\n\nnewlist=list(1:10, mylist, letters[3])            #just for illustration#\nnewlist[[2]][[\"placebo\"]][[\"pre_bp\"]][5]         \n\n[1] 152"
  },
  {
    "objectID": "Programming In Base R.html#part-4-control-flow-practice",
    "href": "Programming In Base R.html#part-4-control-flow-practice",
    "title": "Programming In Base R",
    "section": "Part 4: Control Flow Practice",
    "text": "Part 4: Control Flow Practice\nSuppose now that we want to add a new column to each dataframe within the list. We can initialize these columns by adding a placeholder for each element like so:\n\nmylist[[\"treatment\"]]$status=character(nrow(treatment))  #initialize#\nmylist[[\"placebo\"]]$status=character(nrow(placebo))      #initialize#\n\nNow we want to fill the placeholders by looping through the elements (not best practice, just used to practice). The column being added is character data describing the post-treatment (or post-placebo) blood pressure for each observation. We use a dummy vector a as a copy of our existing column of interest. While this would not be optimal if we were dealing with lots of data (since it is performing an extra calculation each iteration of the loop), in this case we are fine trading speed for readability.\n\nfor(i in 1:nrow(mylist[[\"treatment\"]])) {                #just to practice 'for'# \n  a=mylist[[\"treatment\"]][[\"post_bp\"]]                   #to make less cluttered#\n  if(a[i]&gt;130) {                                       \n    mylist[[\"treatment\"]][[\"status\"]][i]=\"high\"                                  \n  } else if (a[i]&gt;120) {                               \n    mylist[[\"treatment\"]][[\"status\"]][i]=\"borderline\"\n  } else {\n    mylist[[\"treatment\"]][[\"status\"]][i]=\"optimal\"\n  }\n}\n\nfor(i in 1:nrow(mylist[[\"placebo\"]])) {                   #just to practice 'for'#\n  a=mylist[[\"placebo\"]][[\"post_bp\"]]                      #to make less cluttered#\n  if(a[i]&gt;130) {                                       \n    mylist[[\"placebo\"]][[\"status\"]][i]=\"high\"                                  \n  } else if (a[i]&gt;120) {                               \n    mylist[[\"placebo\"]][[\"status\"]][i]=\"borderline\"\n  } else {\n    mylist[[\"placebo\"]][[\"status\"]][i]=\"optimal\"\n  }\n}"
  },
  {
    "objectID": "Programming In Base R.html#part-5-function-writing",
    "href": "Programming In Base R.html#part-5-function-writing",
    "title": "Programming In Base R",
    "section": "Part 5: Function Writing",
    "text": "Part 5: Function Writing\nFinally, we’d like to create a user-defined function (udf) that takes as inputs 1. a list with two dataframes and 2. a built-in R function. This udf should return the (built-in) R function applied to various vectors in each dataframe. In Part 3, we mentioned that we used the same variable names in both the treatment and placebo dataframes. Here we see why, as we only need to specify the variable names once inside the udf. We are instructed to return a named vector with names specifying the function that was applied to the various columns. We get this name with the deparse(substitute()) section of the code. The only other portion of the udf that deserves pointing out is the care we take when replicating our vector. We note that rep(1:3, 3) repeats the vector three times (i.e. returns 1 2 3 1 2 3 1 2 3) while rep(1:3, each=3) repeats each element in the vector three teams before moving on to the next element (i.e. returns 1 1 1 2 2 2 3 3 3).\n\nmyfunction=function(l, func=mean) {       #list w/ 2 dfs, set default function to mean#\n  df1=l[[1]]; df2=l[[2]]\n  a=c(\"pre_bp\", \"post_bp\", \"diff_bp\")     #assume same variable names in dfs#\n  b=vector()                              #initialize#\n  \n  for (i in 1:length(a)) {                #apply function (no l/sappy yet)#\n    b[(2*i)-1]=func(df1[,a[i]])           #no fear of hard-coding 2...#\n    b[(2*i)]=func(df2[,a[i]])             #...since input list is 2 dfs#\n  }\n  \n  stat=deparse(substitute(func))          #get name of user inputted stat#\n  \n  names(b)=paste0(\n    rep(names(l), length(a)),             #names of df's in list#\n    \"_\", rep(a, each=2), \"_\",             #names of columns in df#\n     stat)                                #name of desired stat#\n                \nreturn(b)                                 #directions say named vector instead of list okay#\n}\n\nTo test our udf, we try a few different functions. Notably, we crafted the udf to have a default function of mean which is shown in the first example.\n\nmyfunction(mylist)                        #testing to see defaults work#\n\n treatment_pre_bp_mean    placebo_pre_bp_mean treatment_post_bp_mean \n                129.35                 131.90                 112.35 \n  placebo_post_bp_mean treatment_diff_bp_mean   placebo_diff_bp_mean \n                128.90                 -17.00                  -3.00 \n\nmyfunction(mylist, var)                   #testing various non-default functions#\n\n treatment_pre_bp_var    placebo_pre_bp_var treatment_post_bp_var \n             64.55526             149.87778              74.76579 \n  placebo_post_bp_var treatment_diff_bp_var   placebo_diff_bp_var \n            124.98889             153.68421             341.33333 \n\nmyfunction(mylist, sd)\n\n treatment_pre_bp_sd    placebo_pre_bp_sd treatment_post_bp_sd \n            8.034629            12.242458             8.646721 \n  placebo_post_bp_sd treatment_diff_bp_sd   placebo_diff_bp_sd \n           11.179843            12.396944            18.475209 \n\nmyfunction(mylist, min)\n\n treatment_pre_bp_min    placebo_pre_bp_min treatment_post_bp_min \n                  114                   114                    98 \n  placebo_post_bp_min treatment_diff_bp_min   placebo_diff_bp_min \n                  105                   -40                   -33 \n\nmyfunction(mylist, max)\n\n treatment_pre_bp_max    placebo_pre_bp_max treatment_post_bp_max \n                  141                   152                   130 \n  placebo_post_bp_max treatment_diff_bp_max   placebo_diff_bp_max \n                  143                     5                    21"
  }
]